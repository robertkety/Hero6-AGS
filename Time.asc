/**
* Time.asc
* The Day & Night Engine for Hero6.
*
* Time is decided by amount of ticks calculated from the Adventure Game Studio's timer.
*                               1 tick = 10 minutes of in-game time.
* 10 minutes of in-game time * 6 ticks = 1 hour of in-game time.
*    1 hour of in-game time * 24 ticks = 1 day of in-game time.
*                           1 * 6 * 24 = 144 ticks total to pass one day of in-game time.
*
* Real world time duration of 1 tick is decided by the constant LOOPS_PER_INGAME_TEN_MINUTES
* in Time.ash. AGS is set to run 40 cycles for each second, so if the constant is set to 400
* this would increment the tick every 10 seconds.
* 40 cycles * 10 seconds = 400 cycles = 10 minutes of in-game time = 1 tick
*
* @author Per Olav Flaten
*/

int getHourFromTicks(int ticks)
{
  return ticks / 6;
}

int getMinutesFromTicks(int ticks)
{
  return ticks % 6;
}

int getTicksFromHour(int hour)
{
  return hour * 6;
}

/**
* A bool helper function to see if the current time is within a specific time interval.
*
* @param startTime - The start point of the time interval with precision of every hour
* @param endTime - The end point of the time interval with precision of every hour
* @return A bool value indicating that the current time is within the time interval
*
* @author Per Olav Flaten
*/
bool isHourInTimeInterval(int startTime, int endTime)
{
  int hour = getHourFromTicks(timeinfo.ticks); //144 ticks per day. 6 ticks occur for every hour. 144 / 6 returns the hour of the day in military time
  int minute = getMinutesFromTicks(timeinfo.ticks); //Precision down to every 10th minute
  if(startTime < endTime)//Check that the current time is within the specified interval
  {
    if((hour >= startTime && hour < endTime) || (hour == endTime && minute == 0))return true;
  }
  else//Check that the current time is within [startTime,24:00] or if that fails, [00:00, endTime]
  {      
    if((hour >= startTime && hour <= 24) || (hour >= 0 && hour <= endTime && minute == 0))return true;
  }
  return false;
}

/**
* Processing of the graphical effects for Daytime & Nightime. Checks and calculations are made to ensure smooth
* transitioning of sunrise and sunset. For every other time of the day the graphics are set to a constant value.
*
* @author Per Olav Flaten
*/
function processDayOrNightFilter()
{
  //DarkForest, Interior and Cave rooms should have custom lightness/darkness handling.
  if (GetRoomProperty("Scene Flag") != 4 && GetRoomProperty("Scene Flag") != 5 && GetRoomProperty("Scene Flag") != 7)
  {
    cFilter.ChangeRoom(cEgo.Room);
    if(isHourInTimeInterval(21, 6))//Nightime
    {
      cFilter.Transparency = 46;
    }
    else if(isHourInTimeInterval(9, 18))//Daytime
    {
      cFilter.Transparency = 100;
    }
    else if(isHourInTimeInterval(6, 9))//06:00-09:00 is sunrise
    {    
      cFilter.Transparency = 100 - (3 * (getTicksFromHour(9) - timeinfo.ticks));//Formula should output 46 at 06:00, and 100 at 09:00
    }
    else if(isHourInTimeInterval(18, 21))//18:00-21:00 is sunset
    {
      cFilter.Transparency = 100 - 3 * ((getTicksFromHour(21) - getTicksFromHour(18)) - (getTicksFromHour(21) - timeinfo.ticks));//Formula should output 100 at 18:00, and 46 at 21:00
    }
  }
}

/**
* The actual time processing and helping code is gathered here. 
*
* This is the function that should be called globally if lightness/darkness has been forcefully modified
* by a plot-event, and we wish to dynamically reset it back to reflect on the current time of the 
* day. Otherwise it runs every game cycle.
*
* PS: Calling the time processing globally is remnant of the previous time engine where it would be called
* every time a block of the type Wait(int waitLoops) has been executed. There might not be any need for
* recalling time processing if it picks up anyways when the waitLoops has expired, this should be tested.
* 
* @author Per Olav Flaten
*/
function processTime()
{
  if(cEgo.Room != 100 && cEgo.Room != 101)
  {
    if(IsTimerExpired(Timer_Daytime))
    {     
      timeinfo.ticks++;
      SetTimer(Timer_Daytime, LOOPS_PER_INGAME_TEN_MINUTES);
    }
    if(getHourFromTicks(timeinfo.ticks) >= 24) 
    {
      Display("It is getting late");
      timeinfo.ticks = timeinfo.ticks - MAX_AMOUNT_TICKS_ONE_INGAME_DAY; // Reset timer, 24:00 == 00:00, 24:10 == 00:10, 25:10 == 01:10, etc.
      timeinfo.Day++;
    }
    processDayOrNightFilter();
  }
}

bool isDaytime()
{
  return isHourInTimeInterval(6, 18);
}

/**
* Sets initial values related to time handling, should be called after the character has been
* successfully created and accepted.
*
* @author Per Olav Flaten
*/
function initTimeProcessing()
{
  timeinfo.ticks = getTicksFromHour(12); //Start new game at 12:00 military time	
  timeinfo.Day = 1;
  SetTimer(Timer_Daytime, LOOPS_PER_INGAME_TEN_MINUTES);
}

/**
* Placeholder current time display, remove once a better display is implemented
*/
function testTime()
{
  int hour = getHourFromTicks(timeinfo.ticks);
  int minute = getMinutesFromTicks(timeinfo.ticks) * 10;
  if(isDaytime()) Display("It is Daytime %d:%d, on Day %d",hour, minute, timeinfo.Day);
  else Display("It is Nighttime %d:%d, on Day %d",hour, minute, timeinfo.Day);
}

function repeatedly_execute_always()
{
  processTime();
}

function on_event(EventType event, int data) 
{
  if (event == eEventEnterRoomBeforeFadein)
  {
    processTime();
  }
}
