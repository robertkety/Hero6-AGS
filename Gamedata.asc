// Main script for module 'GameData'

/** This is the GameData module. All quest related flags ... */
TimeData timeinfo;
export timeinfo;

Flags flags;
export flags;

HeroData heroinfo;
HeroData fighterData;
HeroData mageData;
HeroData thiefData;
export heroinfo;
export fighterData;
export mageData;
export thiefData;

short allocate = 30;
export allocate;

bool northexit;
export northexit;
bool eastexit;
export eastexit;
bool westexit;
export westexit;
bool southexit;
export southexit;

bool runningMode;
export runningMode;

bool sneakingMode;
export sneakingMode;

float alertLevel;
export alertLevel;

float regionNoise = 0.1;
export regionNoise;

short heroPrevX;
export heroPrevX;

short heroPrevY;
export heroPrevY;

float hp_temp;
float sp_temp;
float mp_temp;

/* Math functions */
float max(float a, float b) {
  if (a > b) return a;
  else return b;
}
float min(float a, float b) {
  if (a > b) return b;
  else return a;
}
int maxInt(int a, int b) {
  if (a > b) return a;
  else return b;
}
int minInt(int a, int b) {
  if (a > b) return b;
  else return a;
}
int abs(int a) {
  int b;
  if (a < 0) b = a * (-1);
  else b = a;
  return b;
}
int floor(float a) {
  return FloatToInt(a, eRoundDown);
}
int ceil(float a) {
  return FloatToInt(a, eRoundUp);
}

function ExitGame() {
  QuitGame(0);
}
function GameOverDialog(String header, String message) {
  SetMusicRepeat(0);
  PlayMusic(22);
  SetMusicRepeat(1);
  gIconbar.Visible = false;
  gGameover.Visible = true;
  if (header.CompareTo("", true) != 0) {
    lblGHeader.Text = header;
  }
  if (message.CompareTo("", true) != 0) {
    lblGMessage.Text = message;
  }
    
}

function InitializeClasses() {
  fighterData.str = 20;
  fighterData.Int = 10;
  fighterData.agi = 25;
  fighterData.vit = 20;
  fighterData.luck = 20;
  fighterData.comm = 5;
  fighterData.honor = 10;
  fighterData.magic = 0;
  fighterData.weaponuse = 30;
  fighterData.parry = 30;
  fighterData.dodge = 30;
  fighterData.throw = 10;
  fighterData.climb = 0;
  fighterData.stealth = 0;
  fighterData.lockpick = 0;
  
  mageData.str = 10;
  mageData.Int = 25;
  mageData.agi = 25;
  mageData.vit = 10;
  mageData.luck = 20;
  mageData.comm = 15;
  mageData.honor = 5;
  mageData.magic = 20;
  mageData.weaponuse = 20;
  mageData.parry = 0;
  mageData.dodge = 20;
  mageData.throw = 0;
  mageData.climb = 0;
  mageData.stealth = 0;
  mageData.lockpick = 0;
  
  thiefData.str = 10;
  thiefData.Int = 15;
  thiefData.agi = 35;
  thiefData.vit = 15;
  thiefData.luck = 30;
  thiefData.comm = 15;
  thiefData.honor = 5;
  thiefData.magic = 0;
  thiefData.weaponuse = 20;
  thiefData.parry = 0;
  thiefData.dodge = 20;
  thiefData.throw = 15;
  thiefData.climb = 10;
  thiefData.stealth = 10;
  thiefData.lockpick = 10;

}
function SetRunningMode(short mode) {
  sneakingMode = false;
  cEgo.StopMoving();
  if ((mode == 1) && (cEgo.WalkSpeedX <= 4)){
		runningMode = true;
    mouse.ChangeModeGraphic(eModeWalkto, 2340);
    cEgo.LockView(HERO_RUN);
		cEgo.SetWalkSpeed(8, 8);
		}
	else if ((mode == 0) && (cEgo.WalkSpeedX > 4)){
		runningMode = false;
    mouse.ChangeModeGraphic(eModeWalkto, 29);
		cEgo.SetWalkSpeed(4, 4);	
		cEgo.UnlockView(); 
  }
  /*This function was intended to be a recursive toggle for walk/run
    Switched it to simple conditional with the addition of unique
    icons for walking and running - Robert Kety*/
	else if (mode == 2) {
	  if (runningMode) SetRunningMode(0);
	  else SetRunningMode(1);
	}
	
}
function SetSneakingMode(short mode) {
  runningMode = false;
  cEgo.StopMoving();
  if (mode == 1) {
		sneakingMode = true;
		cEgo.SetWalkSpeed(3, 3);
		cEgo.LockView(HERO_SNEAK);
		}
	else if (mode == 0) {
		sneakingMode = false;
		cEgo.SetWalkSpeed(4, 4);	
    cEgo.UnlockView();
  }
  // toggle
	else if (mode == 2) {
	  if (sneakingMode) SetSneakingMode(0);
	  else SetSneakingMode(1);
	}  
}
int GetModeView() {
  cEgo.AnimationSpeed = 1;
  if (!runningMode && !sneakingMode) {
    SetSneakingMode(0);
    SetRunningMode(0);
		return HEROVIEW;
	}
  else if (runningMode) {
    SetRunningMode(1);
		return HERO_RUN;
	}
  else if (sneakingMode) {
    SetSneakingMode(1);
		return HERO_SNEAK;
	}
}
bool checkmoney(short s, short g) {
  short totalcost, totalcash;
  if (g == 0) g = 0;
  totalcost = g*5 + s;
  totalcash = heroinfo.gold*5 + heroinfo.silver;
  if (totalcost > totalcash) return false;
  else return true;
}
bool herobuy(short s, short g) {
  short totalcost, totalcash;
  if (g == 0) g = 0;
  totalcost = g*5 + s;
  totalcash = heroinfo.gold*5 + heroinfo.silver;
  if (totalcost > totalcash) return false;
  else {
  	heroinfo.silver = heroinfo.silver - totalcost;
		while (heroinfo.silver < 0) {
			if (heroinfo.gold > 0) {
				heroinfo.gold = heroinfo.gold -1;
				heroinfo.silver = heroinfo.silver+5;
			}
			else {
				// this should never happen
			}
		}	
    return true;
  }
}
bool PurchaseItem(InventoryItem* i, String msg) {
	if (herobuy(i.GetProperty("Cost"), 0)) {
	  cEgo.AddInventory(i);
		Display(msg);
		return true;
	}
	else {
		Display("You don't have enough money for the purchase.");
		return false;
	}
}  
function heroCollapse() {
  cEgo.LockView(HERO_COLLAPSE);
  cEgo.Animate(0, 2, eOnce, eBlock, eForwards);
}
bool hasNorthExit() {
  String s = Room.GetTextProperty("RoomExits");
  int f = s.Contains("N");
  if (f == -1) return false;
  else return true;
}
bool hasSouthExit() {
  String s = Room.GetTextProperty("RoomExits");
  int f = s.Contains("S");
  if (f == -1) return false;
  else return true;
}
bool hasWestExit() {
  String s = Room.GetTextProperty("RoomExits");
  int f = s.Contains("W");
  if (f == -1) return false;
  else return true;
}
bool hasEastExit() {
  String s = Room.GetTextProperty("RoomExits");
  int f = s.Contains("E");
  if (f == -1) return false;
  else return true;
}

/*** GUI functions ****************************************************************************************/
function recallCursorModes() {
  mouse.EnableMode(eModeLookat);
	mouse.EnableMode(eModeTalkto);
	mouse.EnableMode(eModeUseinv);
}
int SetBarGraphic(float i) {
  if (i <= 0.0) return 779;
  if (i > 92.0) return 415;
  
  if (i > 0.0 && i <= 4.17) return 778;
  if (i > 4.17 && i <= 8.34) return 777;
  if (i > 8.34 && i <= 12.51) return 776;
  if (i > 12.51 && i <= 16.68) return 775;
  if (i > 16.68 && i <= 20.85) return 774;
  if (i > 20.85 && i <= 25.02) return 773;
  if (i > 25.02 && i <= 29.19) return 772;
  if (i > 29.19 && i <= 33.36) return 771;
  if (i > 33.36 && i <= 37.51) return 770;
  if (i > 37.51 && i <= 41.68) return 769;
  if (i > 41.68 && i <= 45.85) return 768;
  if (i > 45.85 && i <= 50.02) return 767;
  if (i > 50.02 && i <= 54.19) return 766;
  if (i > 54.19 && i <= 58.36) return 765;
  if (i > 58.36 && i <= 62.53) return 764;
  if (i > 62.53 && i <= 66.70) return 763;
  if (i > 66.70 && i <= 70.87) return 762;
  if (i > 70.87 && i <= 75.04) return 761;
  if (i > 75.04 && i <= 79.21) return 760;
  if (i > 79.21 && i <= 83.38) return 759;
  if (i > 83.38 && i <= 87.55) return 758;
  if (i > 87.55 && i <= 92.0) return 757;
}
int SetBarGraphic2(float i) {
  if (i <= 0.0) return 851;
  if (i > 92.0) return 855;
  
  if (i > 0.0 && i <= 4.17) return 1285;
  if (i > 4.17 && i <= 8.34) return 1284;
  if (i > 8.34 && i <= 12.51) return 1283;
  if (i > 12.51 && i <= 16.68) return 1282;
  if (i > 16.68 && i <= 20.85) return 1281;
  if (i > 20.85 && i <= 25.02) return 1280;
  if (i > 25.02 && i <= 29.19) return 1279;
  if (i > 29.19 && i <= 33.36) return 1204;
  if (i > 33.36 && i <= 37.51) return 1202;
  if (i > 37.51 && i <= 41.68) return 1201;
  if (i > 41.68 && i <= 45.85) return 1200;
  if (i > 45.85 && i <= 50.02) return 1199;
  if (i > 50.02 && i <= 54.19) return 1198;
  if (i > 54.19 && i <= 58.36) return 1197;
  if (i > 58.36 && i <= 62.53) return 1195;
  if (i > 62.53 && i <= 66.70) return 1186;
  if (i > 66.70 && i <= 70.87) return 1185;
  if (i > 70.87 && i <= 75.04) return 1178;
  if (i > 75.04 && i <= 79.21) return 859;
  if (i > 79.21 && i <= 83.38) return 858;
  if (i > 83.38 && i <= 87.55) return 857;
  if (i > 87.55 && i <= 92.0) return 856;
}
function UpdateCombatLabels() {
  
  //if (combatmonster == null) return;
  
 	float h;
  h = (IntToFloat(heroinfo.hp) / IntToFloat(heroinfo.mhp)) * 100.0;
 	lblHealth.NormalGraphic = SetBarGraphic(h);
 	//h = (IntToFloat(enemyHP) / IntToFloat(combatmonster.GetProperty("mhp"))) * 100.0;
 	lblMonsterHealth.NormalGraphic = SetBarGraphic(h);
 	//lblMonsterLabel.Text = combatmonster.Name;
 	
 	h = (IntToFloat(heroinfo.sp) / IntToFloat(heroinfo.msp)) * 100.0;
 	lblStaminaBar.NormalGraphic = SetBarGraphic(h);
	
}
function UpdateTopBarLabels() {
  
 	float h;
  h = (IntToFloat(heroinfo.hp) / IntToFloat(heroinfo.mhp)) * 100.0;
 	topBarHP.NormalGraphic = SetBarGraphic2(h);
 	
 	h = (IntToFloat(heroinfo.sp) / IntToFloat(heroinfo.msp)) * 100.0;
 	topBarSP.NormalGraphic = SetBarGraphic2(h);
 	
 	if (heroinfo.mmp <= 0) {
 	  topBarMP.NormalGraphic = 851;
		return;
	}

 	h = (IntToFloat(heroinfo.mp) / IntToFloat(heroinfo.mmp)) * 100.0;
 	topBarMP.NormalGraphic = SetBarGraphic2(h);
	
}
function DisableModeGUI() {
  btnRun.Enabled = false;
  btnRun.NormalGraphic = 1816;
  
	btnSneak.Enabled = false;
	btnSneak.NormalGraphic = 1817;
}
function EnableModeGUI() {
  btnRun.Enabled = true;
  btnRun.NormalGraphic = 544;
  
	btnSneak.Enabled = true;
	btnSneak.NormalGraphic = 545;
}



/*** Tower Quest: Riddles *********************************************************************************/
RiddleData riddles[MAX_AVAILABLE_RIDDLES];
export riddles;
// riddle variables
short riddle_selection[5];
export riddle_selection;
RiddleData current_riddle;
short riddleCorrect = -1; // -1: Ain't answered yet, 0: wrong, 1: correct;
export riddleCorrect;

function InitializeRiddles() {
  
  // Initialize agreed riddles
  riddles[0].riddle[0] = "Name the warrior with honor in his";
  riddles[0].riddle[1] = "wake. My goal is to share and never";
  riddles[0].riddle[2] = " to take.";
  riddles[0].riddle[3] = "";
  riddles[0].riddle[4] = "";
  riddles[0].riddle[5] = "";
  riddles[0].answer[0] = "paladin";
  
  riddles[1].riddle[0] = "I live alone with an unforeseen power.";
	riddles[1].riddle[1] = "Who am I that lurks in the tower?";
  riddles[1].riddle[2] = "";
  riddles[1].riddle[3] = "";
  riddles[1].riddle[4] = "";
  riddles[1].riddle[5] = "";
  riddles[1].answer[0] = "marvin";
  
  riddles[2].riddle[0] = "I process great knowledge but make no sound.";
  riddles[2].riddle[2] = "Search within me and wisdom can be found.";
  riddles[2].riddle[1] = "";
  riddles[2].riddle[3] = "";
  riddles[2].riddle[4] = "";
  riddles[2].riddle[5] = "";
  riddles[2].answer[0] = "library";
  
  riddles[3].riddle[0] = "I drown your sorrows with a blurry sight.";
  riddles[3].riddle[2] = "What am I that bring joy for a single night.";
  riddles[3].riddle[1] = "";
  riddles[3].riddle[3] = "";
  riddles[3].riddle[4] = "";
  riddles[3].riddle[5] = "";
  riddles[3].answer[0] = "beer";
  riddles[3].answer[1] = "grog";
  riddles[3].answer[2] = "alcohol";
  riddles[3].answer[3] = "rum";
  
  riddles[4].riddle[1] = "I am your friend, created by your spell.";
  riddles[4].riddle[2] = "What am I that will serve you well?";
  riddles[4].riddle[0] = "";
  riddles[4].riddle[3] = "";
  riddles[4].riddle[4] = "";
  riddles[4].riddle[5] = "";
  riddles[4].answer[0] = "familiar";
  
  riddles[5].riddle[0] = "My presence is not often by choice.";
  riddles[5].riddle[1] = "But when I arrive, you may rejoice.";
  riddles[5].riddle[2] = "I am born by the power of thought.";
  riddles[5].riddle[3] = "What am I that brings inspiration when caught?";
  riddles[5].riddle[4] = "";
  riddles[5].riddle[5] = "";
  riddles[5].answer[0] = "idea";
  riddles[5].answer[1] = "muse";
  
  riddles[6].riddle[0] = "You are using it now, this is how we talk.";
  riddles[6].riddle[1] = "Name that device that makes the hero walk";
  riddles[6].riddle[2] = "";
  riddles[6].riddle[3] = "";
  riddles[6].riddle[4] = "";
  riddles[6].riddle[5] = "";
  riddles[6].answer[0] = "mouse";

  riddles[7].riddle[0] = "Guilds in every town bear us.";
  riddles[7].riddle[1] = "Pride of every mantle and flame-lit houses.";
  riddles[7].riddle[3] = "Yet, if 5 wondrous guild halls display us from crest to neck.";
  riddles[7].riddle[5] = "Then where's the rest of our corpses?";
  riddles[7].riddle[2] = "What am I?";
  riddles[7].riddle[4] = "";
  riddles[7].answer[0] = "moose";

  riddles[8].riddle[0] = "I have no form but can make you more.";
  riddles[8].riddle[1] = "What am I that can bust a groove?";
  riddles[8].riddle[2] = "";
  riddles[8].riddle[3] = "";
  riddles[8].riddle[4] = "";
  riddles[8].riddle[5] = "";
  riddles[8].answer[0] = "music";
  
  riddles[9].riddle[2] = "It begins in the womb but where does it end?";
  riddles[9].riddle[0] = "";
  riddles[9].riddle[1] = "";
  riddles[9].riddle[3] = "";
  riddles[9].riddle[4] = "";
  riddles[9].riddle[5] = "";
  riddles[9].answer[0] = "tomb";
  
  riddles[10].riddle[0] = "I know the gallop, but not the ride;";
  riddles[10].riddle[1] = "the hooves but not the feet.";
  riddles[10].riddle[2] = "A friend of men and a rider's envy.";
  riddles[10].riddle[3] = "What am I?";
  riddles[10].riddle[4] = "";
  riddles[10].riddle[5] = "";
  riddles[10].answer[0] = "centaur";
  
	riddles[11].riddle[0] = "Green without envy. She watches you alone.";
	riddles[11].riddle[2] = "Name the one who tends the weeping stone.";
	riddles[11].riddle[1] = "";
	riddles[11].riddle[3] = "";
	riddles[11].riddle[4] = "";
	riddles[11].riddle[5] = "";
	riddles[11].answer[0] = "greenleaf";
  
	riddles[12].riddle[0] = "Cheese of the gods, it's said.";
	riddles[12].riddle[1] = "Reman delicacies, loved by all.";
	riddles[12].riddle[2] = "The perfect, the fifth element.";
	riddles[12].riddle[3] = "A magician's and a scientist's circle of perfection. What am I?";
	riddles[12].riddle[4] = "";
	riddles[12].riddle[5] = "";
	riddles[12].answer[0] = "pizza";
  // flag
	riddles[13].riddle[0] = "Dancers in  magical forests,";
	riddles[13].riddle[1] = "Rogue limbs, twig and branch,";
	riddles[13].riddle[2] = "Your singers in the canopy darkness,";
	riddles[13].riddle[3] = "A party for birch, maple and pine.";
	riddles[13].riddle[4] = "Dear guest, what am I?";
	riddles[13].riddle[5] = "";
	riddles[13].answer[0] = "dryad";
  
	riddles[14].riddle[0] = "I'm used only once,";
	riddles[14].riddle[1] = "those darned papers discarded at the end,";
	riddles[14].riddle[2] = "make me an object of litter when the candle's turned off.";
	riddles[14].riddle[4] = "Mage's delight, what am I?";
	riddles[14].riddle[3] = "";
	riddles[14].riddle[5] = "";
	riddles[14].answer[0] = "scroll";
  
  int i = 0, j = 0;
  bool alreadySelected = false;
  
  while (i < 5) {
    riddle_selection[i] = -1;
    i++;
  }
  i = 0;
  // select thine riddles that shalt be asked.
  while (i < 5) {
    alreadySelected = false;
    
    int x = Random(MAX_AVAILABLE_RIDDLES-1);
    //Display("x: %d",  x);
    j = 0;
    while (j < 5 && !alreadySelected) {
      if (riddle_selection[j] == x) { // already selected?
        alreadySelected = true;
      }
      j++;
    }
    if (!alreadySelected) {
      riddle_selection[i] = x;
      i++;
    }
  }
  
}
bool AskRiddle(short r) {
  lblRiddle01.Text = riddles[r].riddle[0];
  lblRiddle02.Text = riddles[r].riddle[1];
  lblRiddle03.Text = riddles[r].riddle[2];
  lblRiddle04.Text = riddles[r].riddle[3];
  lblRiddle05.Text = riddles[r].riddle[4];
  lblRiddle06.Text = riddles[r].riddle[5];
  
  lblAnswer.Text = String.Format("%d",r);   //riddles[r].answer[0];
  gRiddlebox.Visible = true; 
}



/*** Utils *********************************************************************************/
bool IsCharacterWithinRoomBounds(Character *c) {
   if (c.x > Room.LeftEdge && c.x < Room.RightEdge && c.y > Room.TopEdge && c.y < Room.BottomEdge) return true;
   else return false;
}
short getEuclideanDistance(short startx, short starty, short endx, short endy) {
  			  // calculate distance using simple pythagoras
		int xdist = abs(startx - endx);
		int ydist = abs(starty - endy);
		int d = floor(Maths.Sqrt(IntToFloat((xdist*xdist)+(ydist*ydist))));
		return d;
}
bool IsCharacterFacing(Character *c, Character *d) {
  //if (ccGetCharacterRoom(BOT) == character[EGO].room) {
  if (c.Room != d.Room) return false;
  
  if (c.Loop == 0) {
    if ((d.x > c.x - 40 && d.x < c.x + 30) && d.y > c.y) {
      return true;
    }
  }
  else if (c.Loop == 1) {
    if ((d.y > c.y - 40 && d.y < c.y + 40) && d.x < c.x) {
      return true;
    }
  }
  else if (c.Loop == 2) {
    if ((d.y > c.y - 40 && d.y < c.y + 40) && d.x > c.x) {
      return true;
    }
  }
  else if (c.Loop == 3) {
    if ((d.x > c.x - 40 && d.x < c.x + 30) && d.y < c.y) {
      return true;
    }
  }
  return false;
}
function HandleShadows() {
  int a = GetRoomProperty("Scene Flag");
  
  if (a == 5 || a == 7) {
    cHeroshad.ChangeRoom(-1);
    return;
  }
  cHeroshad.ChangeRoom(cEgo.Room, cEgo.x, cEgo.y);
  cHeroshad.Baseline = cEgo.Baseline - 2;
  
}
/*function StartCommentary() {
  int num = GetRoomProperty("CommStr");
  String comm = Room.Messages[num];
  String auth = Room.GetTextProperty("CommAuthor");
  
  lblComm.Y = gCommentary.Height + 5;
  lblComm.Text = comm;
  lblCommentator.Text = auth;
  
  DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
  DrawingSurface *backup = surface.CreateCopy();

  RawRestoreScreen();
  RawSaveScreen();
  surface.DrawingColor = 39553;
  surface.DrawLine(305, 10, 310, 10);
  surface.DrawLine(305, 30, 310, 30);
  surface.DrawLine(305, 10, 305, 30);
  surface.DrawLine(310, 10, 310, 30);  
  Wait(2);
  surface.DrawSurface(backup);
  surface.DrawLine(258, 20, 300, 20);
  surface.DrawLine(258, 60, 300, 60);
  surface.DrawLine(258, 20, 258, 60);
  surface.DrawLine(300, 20, 300, 60);  
  Wait(2);
  surface.DrawSurface(backup);
  surface.DrawLine(221, 30, 285, 30);
  surface.DrawLine(221, 85, 285, 85);
  surface.DrawLine(221, 30, 221, 85);
  surface.DrawLine(285, 30, 285, 85);  
  Wait(2);
  surface.DrawSurface(backup);
  surface.DrawLine(174, 40, 270, 40);
  surface.DrawLine(174, 110, 270, 110);
  surface.DrawLine(174, 40, 174, 110);
  surface.DrawLine(270, 40, 270, 110);  
  Wait(2);
  surface.DrawSurface(backup);
  surface.DrawLine(127, 50, 255, 50);
  surface.DrawLine(127, 135, 255, 135);
  surface.DrawLine(127, 50, 127, 135);
  surface.DrawLine(255, 50, 255, 135);
  Wait(2);
  surface.DrawSurface(backup);
  surface.DrawLine(80, 60, 240, 60);
  surface.DrawLine(80, 160, 240, 160);
  surface.DrawLine(80, 60, 80, 160);
  surface.DrawLine(240, 60, 240, 160);
  Wait(2);
  surface.DrawSurface(backup);

  surface.Release();
  backup.Release();
  gCommentary.Visible = true;
  
  StartCutscene(eSkipAnyKeyOrMouseClick);
  
  while (lblComm.Y > -300) {
    lblComm.Y -= 1;
    Wait(3);
  }
  EndCutscene();
  gCommentary.Visible = false;
}
*/