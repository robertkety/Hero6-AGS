/*** AGS.gui.setStatsBtn   *****************************************************************************************************************/

/**
* The buttons for adding stat values was utilizing the exact same algorithm, resulting in
* a lot of duplicate code. That algorithm has been split out into a more universally usable
* function. Typical way of using this function would be:
*
* heroinfo.str += getStatIncrease(heroinfo.str);
*	refreshPoolStats();
*
* TODO --- Implement the input argument to actually change inside the function. Note that the
* above example of usage is completely intented by design, due to the stat values being retrieved
* from a non-managable struct, which means dealing with pointers became difficult. If this is ever
* successfull refreshPoolStats() should be called at the end of the function so that even more 
* duplicate lines can be removed from the Click-functions.
*
* @param stat - The stat that the increase should be calculated of.
* @return The total increase of the stat.
*
* @author Per Olav Flaten / Unknown
*/
int getStatIncrease(short stat)
{
  if(allocate > 0)
  {
    if(stat == 0 && allocate >= 15)allocate -= 15;
    else if(stat != 0) allocate -= 5;
    return 5;
  }
  return 0; //No increase
}

/**
* The buttons for subtracting stat values was utilizing the exact same algorithm, resulting in
* a lot of duplicate code. That algorithm has been split out into a more universally usable
* function. Typical way of using this function would be:
*
* heroinfo.str -= getStatDecrease(heroinfo.str, fighterData.str, mageData.str, thiefData.str);
* refreshPoolStats();
*
* TODO --- Implement the input argument to actually change inside the function. Note that the
* above example of usage is completely intented by design, due to the stat values being retrieved
* from a non-managable struct, which means dealing with pointers became difficult. If this is ever
* successfull refreshPoolStats() should be called at the end of the function so that even more 
* duplicate lines can be removed from the Click-functions.
*
* @param stat - The stat that the decrease should be calculated off.
* @param minValueStatFighter - A check is performed on this stat to avoid reducing stat below minimum value.
* @param minValueStatMage - A check is performed on this stat to avoid reducing stat below minimum value.
* @param minValueStatThief - A check is performed on this stat to avoid reducing stat below minimum value.
* @return The total decrease of the stat.
*
* @author Per Olav Flaten / Unknown
*/
int getStatDecrease(short stat, short minValueStatFighter, short minValueStatMage, short minValueStatThief)
{
  short minValueStat; //A buffer that makes certain the stat is not lowered below minimum value of chosen class.
  if (heroinfo.class == FIGHTER) minValueStat = minValueStatFighter;
  else if (heroinfo.class == MAGE) minValueStat = minValueStatMage;
  else if (heroinfo.class == THIEF) minValueStat = minValueStatThief;
  
  if(stat > minValueStat)
  {
    short statBuffer = stat - 5;
    if(statBuffer == 0) allocate += 15;
    else allocate += 5;
    return 5;
  }
  return 0; //No decrease
}

function addStr_Click() {
  heroinfo.str += getStatIncrease(heroinfo.str);
	refreshPoolStats();
}

function addInt_Click() {
  heroinfo.Int += getStatIncrease(heroinfo.Int);
	refreshPoolStats();
}

function addAgi_Click() {
  heroinfo.agi += getStatIncrease(heroinfo.agi);
	refreshPoolStats();
}

function addVit_Click() {
  heroinfo.vit += getStatIncrease(heroinfo.vit);
	refreshPoolStats();
}

function addLuck_Click() {
  heroinfo.luck += getStatIncrease(heroinfo.luck);
	refreshPoolStats();
}

function addMagic_Click() {
  heroinfo.magic += getStatIncrease(heroinfo.magic);
	refreshPoolStats();
}

function addWeaponUse_Click() {
  heroinfo.weaponuse += getStatIncrease(heroinfo.weaponuse);
	refreshPoolStats();
}

function addParry_Click() {
  heroinfo.parry += getStatIncrease(heroinfo.parry);
	refreshPoolStats();
}

function addDodge_Click() {
  heroinfo.dodge += getStatIncrease(heroinfo.dodge);
	refreshPoolStats();
}

function addThrow_Click() {
  heroinfo.throw += getStatIncrease(heroinfo.throw);
	refreshPoolStats();
}

function addClimb_Click() {
  heroinfo.climb += getStatIncrease(heroinfo.climb);
	refreshPoolStats();
}

function addStealth_Click() {
  heroinfo.stealth += getStatIncrease(heroinfo.stealth);
	refreshPoolStats();
}

function addLock_Click() {
  heroinfo.lockpick += getStatIncrease(heroinfo.lockpick);
	refreshPoolStats();
}

function subStr_Click() {
  heroinfo.str -= getStatDecrease(heroinfo.str, fighterData.str, mageData.str, thiefData.str);
  refreshPoolStats();
}

function subInt_Click() {
  heroinfo.Int -= getStatDecrease(heroinfo.Int, fighterData.Int, mageData.Int, thiefData.Int);
  refreshPoolStats();
}

function subAgi_Click() {
  heroinfo.agi -= getStatDecrease(heroinfo.agi, fighterData.agi, mageData.agi, thiefData.agi);
  refreshPoolStats();
}

function subVit_Click() {
  heroinfo.vit -= getStatDecrease(heroinfo.vit, fighterData.vit, mageData.vit, thiefData.vit);
  refreshPoolStats();
}

function subLuck_Click() {
  heroinfo.luck -= getStatDecrease(heroinfo.luck, fighterData.luck, mageData.luck, thiefData.luck);
  refreshPoolStats();
}

function subMagic_Click() {
  heroinfo.magic -= getStatDecrease(heroinfo.magic, fighterData.magic, mageData.magic, thiefData.magic);
  refreshPoolStats();
}

function subWeaponUse_Click() {
  heroinfo.weaponuse -= getStatDecrease(heroinfo.weaponuse, fighterData.weaponuse, mageData.weaponuse, thiefData.weaponuse);
  refreshPoolStats();
}

function subParry_Click() {
  heroinfo.parry -= getStatDecrease(heroinfo.parry, fighterData.parry, mageData.parry, thiefData.parry);
  refreshPoolStats();
}

function subDodge_Click() {
  heroinfo.dodge -= getStatDecrease(heroinfo.dodge, fighterData.dodge, mageData.dodge, thiefData.dodge);
  refreshPoolStats();
}

function subThrow_Click() {
  heroinfo.throw -= getStatDecrease(heroinfo.throw, fighterData.throw, mageData.throw, thiefData.throw);
  refreshPoolStats();
}

function subClimb_Click() {
  heroinfo.climb -= getStatDecrease(heroinfo.climb, fighterData.climb, mageData.climb, thiefData.climb);
  refreshPoolStats();
}

function subStealth_Click() {
  heroinfo.stealth -= getStatDecrease(heroinfo.stealth, fighterData.stealth, mageData.stealth, thiefData.stealth);
  refreshPoolStats();
}

function subLock_Click() {
  heroinfo.lockpick -= getStatDecrease(heroinfo.lockpick, fighterData.lockpick, mageData.lockpick, thiefData.lockpick);
  refreshPoolStats();
}

function back_Click() {
  gCharsheet.Visible = false;
  gCharsheet2.Visible = false;
  allocate = 30;
}

function start_Click() {  

  if(cEgo.Room == 101){
	String confirmMessage;
	if(allocate >= 1) confirmMessage = String.Format("%d points are still unallocated, do you still want to start the game?",allocate);
	else confirmMessage = "Ready to start the game?";
	
	if(DialogBox(confirmMessage))
	{
	  SetScreenTransition(eTransitionBoxout);
      player.ChangeRoom(9, 160,300);
      gIconbar.Visible = true;
      recallCursorModes();  
      if (heroinfo.class == FIGHTER) cEgo.AddInventory(iLongSword);
      else if (heroinfo.class == MAGE) 
      {
      cEgo.AddInventory(iDagger);
      
      }
      else if (heroinfo.class == THIEF) {
        cEgo.AddInventory(iDagger);
        cEgo.AddInventory(iDagger);
      }
      else Display("Invalid hero class value. How did you manage that?!");
      if(heroinfo.magic < 1)
      {
        lblTopBarMP.Visible = false;
        topBarMP.Visible = false;
        topBarMPContainer.Visible = false;
      }
      else
      {
        cSpellchar.AddInventory(iSpellFlame);
        cSpellchar.AddInventory(iSpellFetch);
        cSpellchar.AddInventory(iSpellDetect);
        cSpellchar.AddInventory(iSpellTrigger);
      }
	    gCharsheet.Visible = false;
      gCharsheet2.Visible = false;
      }  
      initTimeProcessing();
	}    
  else
  {
  lblStr.TextColor = 15;
  lblInt.TextColor = 15;
  lblAgi.TextColor = 15;
  lblVit.TextColor = 15;
  lblLuck.TextColor = 15;
  lblMagic.TextColor = 15;
  lblWeaponUse.TextColor = 15;
  lblParry.TextColor = 15;
  lblDodge.TextColor = 15;
  lblStealth.TextColor = 15;
  lblLock.TextColor = 15;
  lblClimb.TextColor = 15;
  gCharsheet.Visible = false;
  gCharsheet2.Visible = false;
  mouse.reloadCursor();
  }  
}

/**
* Click function for the reroll button, which is found in the character creation screen on new game.
*
* @author Per Olav Flaten
*/
function reroll_Click()
{
  if(DialogBox("Are you sure you want to reroll Hero?"))
  {
    allocate = 30;
    setInitialClassStats(heroinfo.class);
  }
}